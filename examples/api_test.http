### Link Shortener API Tests
### Base URL: http://localhost:8080

### 1. Health Check
GET http://localhost:8080/health

### 2. User Registration
POST http://localhost:8080/api/auth/register
Content-Type: application/json

{
  "username": "testuser",
  "email": "test@example.com",
  "password": "password123"
}

### 3. User Login
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "password123"
}

### 4. Get User Profile (requires authentication)
GET http://localhost:8080/api/auth/profile
Authorization: Bearer {{auth_token}}

### 5. Create Short Link (requires authentication)
POST http://localhost:8080/api/links
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "original_url": "https://www.google.com/search?q=golang+programming",
  "custom_alias": "golang-search",
  "title": "Google Search for Golang",
  "expires_at": "2024-12-31T23:59:59Z"
}

### 6. Create Another Link with Auto-generated Short Code
POST http://localhost:8080/api/links
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "original_url": "https://github.com/gin-gonic/gin",
  "title": "Gin Web Framework"
}

### 7. Get All Links (requires authentication)
GET http://localhost:8080/api/links
Authorization: Bearer {{auth_token}}

### 8. Get All Links with Pagination
GET http://localhost:8080/api/links?limit=5&offset=0
Authorization: Bearer {{auth_token}}

### 9. Get Specific Link by ID (requires authentication)
GET http://localhost:8080/api/links/{{link_id}}
Authorization: Bearer {{auth_token}}

### 10. Update Link (requires authentication)
PUT http://localhost:8080/api/links/{{link_id}}
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "original_url": "https://github.com/gin-gonic/gin/releases",
  "title": "Gin Framework Releases",
  "is_active": true
}

### 11. Update Link with Custom Alias
PUT http://localhost:8080/api/links/{{link_id}}
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "custom_alias": "gin-releases",
  "title": "Gin Framework Latest Releases"
}

### 12. Deactivate Link
PUT http://localhost:8080/api/links/{{link_id}}
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "is_active": false
}

### 13. Get Link Statistics (requires authentication)
GET http://localhost:8080/api/links/stats
Authorization: Bearer {{auth_token}}

### 14. Delete Link (requires authentication)
DELETE http://localhost:8080/api/links/{{link_id}}
Authorization: Bearer {{auth_token}}

### 15. Test Redirect (public endpoint)
GET http://localhost:8080/r/golang-search

### 16. Test Redirect with Auto-generated Code
GET http://localhost:8080/r/{{auto_generated_code}}

### 17. Test Invalid Short Code
GET http://localhost:8080/r/invalid-code

### 18. Test Expired Link
GET http://localhost:8080/r/expired-link

### 19. Create Link with Expiration
POST http://localhost:8080/api/links
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "original_url": "https://example.com/temporary",
  "custom_alias": "temp-link",
  "title": "Temporary Link",
  "expires_at": "2024-01-01T00:00:00Z"
}

### 20. Test Rate Limiting
# Make multiple requests quickly to test rate limiting
GET http://localhost:8080/api/links
Authorization: Bearer {{auth_token}}

### 21. Test Invalid Authentication
GET http://localhost:8080/api/links
Authorization: Bearer invalid-token

### 22. Test Missing Authentication
GET http://localhost:8080/api/links

### 23. Test Invalid JSON
POST http://localhost:8080/api/links
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "original_url": "invalid-url",
  "custom_alias": "invalid@alias"
}

### 24. Test Duplicate Custom Alias
POST http://localhost:8080/api/links
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "original_url": "https://example.com/duplicate",
  "custom_alias": "golang-search"
}

### 25. Test Long URL
POST http://localhost:8080/api/links
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "original_url": "https://www.example.com/very/long/url/with/many/parameters?param1=value1&param2=value2&param3=value3&param4=value4&param5=value5&param6=value6&param7=value7&param8=value8&param9=value9&param10=value10",
  "title": "Very Long URL Test"
}

### 26. Test URL without Protocol
POST http://localhost:8080/api/links
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "original_url": "example.com",
  "title": "URL without protocol"
}

### 27. Test CORS Preflight
OPTIONS http://localhost:8080/api/links
Access-Control-Request-Method: POST
Access-Control-Request-Headers: Content-Type, Authorization
Origin: http://localhost:3000

### 28. Test Large Payload
POST http://localhost:8080/api/links
Content-Type: application/json
Authorization: Bearer {{auth_token}}

{
  "original_url": "https://example.com",
  "title": "A" * 1000
}

### 29. Test Concurrent Requests
# This would be tested with a load testing tool like Apache Bench
# ab -n 100 -c 10 -H "Authorization: Bearer {{auth_token}}" http://localhost:8080/api/links

### 30. Test Database Connection
# This would be tested by temporarily stopping PostgreSQL and making requests

### Environment Variables for Testing
# Create a .env file with these variables for testing:
# AUTH_TOKEN=your_jwt_token_here
# LINK_ID=your_link_uuid_here
# AUTO_GENERATED_CODE=your_auto_generated_code_here

### Notes for Testing:
# 1. Replace {{auth_token}} with actual JWT token from login response
# 2. Replace {{link_id}} with actual link UUID from create response
# 3. Replace {{auto_generated_code}} with actual short code from create response
# 4. Test both positive and negative scenarios
# 5. Test edge cases and error conditions
# 6. Test rate limiting by making many requests quickly
# 7. Test CORS by making requests from different origins
# 8. Test authentication by using invalid/missing tokens

